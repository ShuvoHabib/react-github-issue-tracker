[
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14426",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14426/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14426/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14426/events",
    "html_url": "https://github.com/facebook/react/issues/14426",
    "id": 390365863,
    "node_id": "MDU6SXNzdWUzOTAzNjU4NjM=",
    "number": 14426,
    "title": "CSS animations not triggered when modifying className prop elements with the same key",
    "user": {
      "login": "77abe77",
      "id": 16051956,
      "node_id": "MDQ6VXNlcjE2MDUxOTU2",
      "avatar_url": "https://avatars1.githubusercontent.com/u/16051956?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/77abe77",
      "html_url": "https://github.com/77abe77",
      "followers_url": "https://api.github.com/users/77abe77/followers",
      "following_url": "https://api.github.com/users/77abe77/following{/other_user}",
      "gists_url": "https://api.github.com/users/77abe77/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/77abe77/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/77abe77/subscriptions",
      "organizations_url": "https://api.github.com/users/77abe77/orgs",
      "repos_url": "https://api.github.com/users/77abe77/repos",
      "events_url": "https://api.github.com/users/77abe77/events{/privacy}",
      "received_events_url": "https://api.github.com/users/77abe77/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-12T19:04:55Z",
    "updated_at": "2018-12-12T19:05:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "## Example\r\nhttps://codesandbox.io/s/pkn15wl0xq\r\n\r\n## Expected Behavior\r\nClicking on both side buttons should result in a Carousel like animated transition.\r\n\r\n## Actual Behavior\r\nOnly the left button click results in correct transitions. Right button clicks just render the new color without animation.\r\n\r\n## Details\r\nCSSTransitions are located in `public/CSSTransitions.css`. When manually added to an elements class property using the debugger, the animation behavior is correct.\r\n\r\nAFAIK, I have taken into account React reconciliation algorithm with the current implementation of keys. If not, please let me know.\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14425",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14425/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14425/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14425/events",
    "html_url": "https://github.com/facebook/react/issues/14425",
    "id": 390280887,
    "node_id": "MDU6SXNzdWUzOTAyODA4ODc=",
    "number": 14425,
    "title": "Strange behaviour with ternary operators and hrefs",
    "user": {
      "login": "AustinGomez",
      "id": 12689521,
      "node_id": "MDQ6VXNlcjEyNjg5NTIx",
      "avatar_url": "https://avatars2.githubusercontent.com/u/12689521?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AustinGomez",
      "html_url": "https://github.com/AustinGomez",
      "followers_url": "https://api.github.com/users/AustinGomez/followers",
      "following_url": "https://api.github.com/users/AustinGomez/following{/other_user}",
      "gists_url": "https://api.github.com/users/AustinGomez/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AustinGomez/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AustinGomez/subscriptions",
      "organizations_url": "https://api.github.com/users/AustinGomez/orgs",
      "repos_url": "https://api.github.com/users/AustinGomez/repos",
      "events_url": "https://api.github.com/users/AustinGomez/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AustinGomez/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-12T15:36:09Z",
    "updated_at": "2018-12-12T15:36:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen rendering HTML elements based using a ternary condition, if the element has an onClick method defined, then hrefs do not get removed.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/918pvqz1vw\r\n\r\nClick the button, then click the \"Click me second\" with the blank href. You'll still get directed to the URI specified in the unrendered anchor.\r\n\r\nNotice that if you inspect the element you don't see the href in the document tree.\r\n\r\n**What is the expected behavior?**\r\n\r\nYou should not get redirected to the URI specified in the unrendered anchor.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16, haven't checked other versions yet.\r\n\r\nChrome 70.0.3538.110 64 bit\r\nSafari 12.0.1\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14424",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14424/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14424/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14424/events",
    "html_url": "https://github.com/facebook/react/issues/14424",
    "id": 390230593,
    "node_id": "MDU6SXNzdWUzOTAyMzA1OTM=",
    "number": 14424,
    "title": "[future] Overriding content(s) of Component#render breaking behaviour",
    "user": {
      "login": "NeekSandhu",
      "id": 11316020,
      "node_id": "MDQ6VXNlcjExMzE2MDIw",
      "avatar_url": "https://avatars3.githubusercontent.com/u/11316020?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/NeekSandhu",
      "html_url": "https://github.com/NeekSandhu",
      "followers_url": "https://api.github.com/users/NeekSandhu/followers",
      "following_url": "https://api.github.com/users/NeekSandhu/following{/other_user}",
      "gists_url": "https://api.github.com/users/NeekSandhu/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/NeekSandhu/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/NeekSandhu/subscriptions",
      "organizations_url": "https://api.github.com/users/NeekSandhu/orgs",
      "repos_url": "https://api.github.com/users/NeekSandhu/repos",
      "events_url": "https://api.github.com/users/NeekSandhu/events{/privacy}",
      "received_events_url": "https://api.github.com/users/NeekSandhu/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-12-12T13:40:43Z",
    "updated_at": "2018-12-12T21:10:13Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nNeither\r\n\r\nThis issue is of great value as far as `react-virtualized` is concerened.\r\n\r\nSince `react-virtualized` causes Components to unmount once they are out of view. That also affects input elements. Meaning if there's a huge list of contacts and user is editing one entry through `HTMLInputElement` in the list itself. The moment, a user scrolls a bit up or down, that `input` gets unmounted and the entire input state (textValue, undo/redo history) is lost. Not very cool.\r\n\r\nI'm trying to trying to put together an \"HOC\" that under the hood uses \"manually\" constructed `HTMLInputElement` that lives on until user actually cancels the editing. When the component is (re)mounted and `componentDidMount` fires, that \"manual\" input then replaces contents of `Component#render` to make things work!\r\n\r\n\r\n**What is the current behavior?**\r\nEverything works as intended! (but worried about the future)\r\n\r\n1. I'm manually overwriting the `current` property on `React.RefObject` to achieve pseudo-ref-forwarding. (Making the `ref.current` point to an HTMLElement that's \"manually\" injected into DOM)\r\n\r\n2. Replacing the HTMLElement output by Component's render method with an element created \"manually\", and reversing the operation in `componentWillUnmount` lifecycle. For safety, and to avoid confusing React, `shouldComponentUpdate` __always__ returns false.\r\n\r\nBoth of the operations above work nominally as of React `16.*`. **What is the probability that future versions of React will prevent either of those things from happening?**\r\n\r\nHere's how it works: https://codesandbox.io/s/50ryqojnnn\r\n\r\nApologies if this question should belong elsewhere (I really wanted to hear from core team)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14421",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14421/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14421/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14421/events",
    "html_url": "https://github.com/facebook/react/pull/14421",
    "id": 389918022,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3Nzk5OTA1",
    "number": 14421,
    "title": "Merged enableProfilerTimer & enableSchedulerTracing flags into enableProfiling",
    "user": {
      "login": "bvaughn",
      "id": 29597,
      "node_id": "MDQ6VXNlcjI5NTk3",
      "avatar_url": "https://avatars0.githubusercontent.com/u/29597?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bvaughn",
      "html_url": "https://github.com/bvaughn",
      "followers_url": "https://api.github.com/users/bvaughn/followers",
      "following_url": "https://api.github.com/users/bvaughn/following{/other_user}",
      "gists_url": "https://api.github.com/users/bvaughn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bvaughn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bvaughn/subscriptions",
      "organizations_url": "https://api.github.com/users/bvaughn/orgs",
      "repos_url": "https://api.github.com/users/bvaughn/repos",
      "events_url": "https://api.github.com/users/bvaughn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bvaughn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-12-11T19:28:44Z",
    "updated_at": "2018-12-12T20:45:01Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14421",
      "html_url": "https://github.com/facebook/react/pull/14421",
      "diff_url": "https://github.com/facebook/react/pull/14421.diff",
      "patch_url": "https://github.com/facebook/react/pull/14421.patch"
    },
    "body": "In practice, we always turn these flags on and off together.\r\n\r\nWe can also use this new flag to determine when to track suspending components and durations (rather than adding a third flag and complication `ReactFiberRoot`.\r\n\r\nMost of this change is pretty rote. The only file worth looking at more closely is `ReactProfiler-test.internal` where I simplified tests for a case that no longer exists (profiling enabled, tracing disabled). The relevant code related to this change can be seen in `ReactFiberCommitWork`.\r\n\r\n[See this comment below for a better view of the actual changes to `ReactProfiler-test.internal`](https://github.com/facebook/react/pull/14421#issuecomment-446332734)."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14420",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14420/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14420/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14420/events",
    "html_url": "https://github.com/facebook/react/pull/14420",
    "id": 389913705,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3Nzk2NTcz",
    "number": 14420,
    "title": "Add failing test of getDerivedStateFromError+retry",
    "user": {
      "login": "sophiebits",
      "id": 6820,
      "node_id": "MDQ6VXNlcjY4MjA=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/6820?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sophiebits",
      "html_url": "https://github.com/sophiebits",
      "followers_url": "https://api.github.com/users/sophiebits/followers",
      "following_url": "https://api.github.com/users/sophiebits/following{/other_user}",
      "gists_url": "https://api.github.com/users/sophiebits/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sophiebits/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sophiebits/subscriptions",
      "organizations_url": "https://api.github.com/users/sophiebits/orgs",
      "repos_url": "https://api.github.com/users/sophiebits/repos",
      "events_url": "https://api.github.com/users/sophiebits/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sophiebits/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-11T19:17:05Z",
    "updated_at": "2018-12-11T19:21:08Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14420",
      "html_url": "https://github.com/facebook/react/pull/14420",
      "diff_url": "https://github.com/facebook/react/pull/14420.diff",
      "patch_url": "https://github.com/facebook/react/pull/14420.patch"
    },
    "body": "Wanted to try to test out our error handling behavior. I don't fully understand the behavior here."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14418",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14418/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14418/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14418/events",
    "html_url": "https://github.com/facebook/react/issues/14418",
    "id": 389718606,
    "node_id": "MDU6SXNzdWUzODk3MTg2MDY=",
    "number": 14418,
    "title": "This is undefined in OnClick event on HTML generated outside of render()",
    "user": {
      "login": "CodeWriterWriter",
      "id": 14944026,
      "node_id": "MDQ6VXNlcjE0OTQ0MDI2",
      "avatar_url": "https://avatars2.githubusercontent.com/u/14944026?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeWriterWriter",
      "html_url": "https://github.com/CodeWriterWriter",
      "followers_url": "https://api.github.com/users/CodeWriterWriter/followers",
      "following_url": "https://api.github.com/users/CodeWriterWriter/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeWriterWriter/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeWriterWriter/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeWriterWriter/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeWriterWriter/orgs",
      "repos_url": "https://api.github.com/users/CodeWriterWriter/repos",
      "events_url": "https://api.github.com/users/CodeWriterWriter/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeWriterWriter/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 620368407,
        "node_id": "MDU6TGFiZWw2MjAzNjg0MDc=",
        "url": "https://api.github.com/repos/facebook/react/labels/Resolution:%20Needs%20More%20Information",
        "name": "Resolution: Needs More Information",
        "color": "fffde7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-11T11:28:17Z",
    "updated_at": "2018-12-11T19:50:55Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nWhen declaring an OnClick function in HTML written outside of the render() function, \"this\" is undefined.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nCode is as follows:\r\n constructor() {\r\n        super();\r\n        this.generateHTML = this.generateHTML.bind(this);\r\n        this.changeActiveSport = this.changeActiveSport.bind(this);\r\n}\r\nsports = [\r\n        {\r\n            name: 'Soccer',\r\n            active: true\r\n        }, etc ];\r\n\r\ngenerateHTML() {\r\n        return this.sports.map(function (item, i) {\r\n            if (item.active) {\r\n                return <Col sm={2} className=\"sportsTime\" id=\"sportsPanelActive\">{item.name}</Col>\r\n            } else {\r\n                return <Col sm={2} className=\"sportsTime\" onClick={this.changeActiveSport()}>{item.name}</Col>\r\n            }\r\n        });\r\n    };\r\nchangeActiveSport = (e) => {\r\n        this.sports = this.sports.map(function (item, j) {\r\n            item.active = false;\r\n        });\r\n        if (this.sports[i]) {\r\n            this.sports[i].active = true;\r\n        }\r\n        this.sportsHtml = this.generateHTML();\r\n    };\r\n\r\nsportsHtml = this.generateHTML();\r\n\r\n    render() {\r\n        return (\r\n            <Row id=\"sportsRow\">\r\n                <Col sm={8}>\r\n                    <Row>\r\n                        {this.sportsHtml}\r\n                    </Row>\r\n                </Col>  \r\n            </Row>\r\n        );\r\n    }\r\n**What is the expected behavior?**\r\n\r\nThis shouldn't be undefined.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nReact: ^16.0.0\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14415",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14415/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14415/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14415/events",
    "html_url": "https://github.com/facebook/react/pull/14415",
    "id": 389538100,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM3NTA2NTAy",
    "number": 14415,
    "title": "Add unit tests for concurrent mode event dispatching",
    "user": {
      "login": "sebmarkbage",
      "id": 63648,
      "node_id": "MDQ6VXNlcjYzNjQ4",
      "avatar_url": "https://avatars2.githubusercontent.com/u/63648?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sebmarkbage",
      "html_url": "https://github.com/sebmarkbage",
      "followers_url": "https://api.github.com/users/sebmarkbage/followers",
      "following_url": "https://api.github.com/users/sebmarkbage/following{/other_user}",
      "gists_url": "https://api.github.com/users/sebmarkbage/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sebmarkbage/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sebmarkbage/subscriptions",
      "organizations_url": "https://api.github.com/users/sebmarkbage/orgs",
      "repos_url": "https://api.github.com/users/sebmarkbage/repos",
      "events_url": "https://api.github.com/users/sebmarkbage/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sebmarkbage/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-12-10T23:54:20Z",
    "updated_at": "2018-12-11T11:08:16Z",
    "closed_at": null,
    "author_association": "MEMBER",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14415",
      "html_url": "https://github.com/facebook/react/pull/14415",
      "diff_url": "https://github.com/facebook/react/pull/14415.diff",
      "patch_url": "https://github.com/facebook/react/pull/14415.patch"
    },
    "body": "This adds a test for concurrent mode event dispatching.\r\n\r\nThe way we deal with discrete events (click, mouseup, mousedown, touchup, touchdown, submit, etc) is that the result from one event must fully flush before we invoke the event listener of the second one. They are always serial. Note that they're not synchronous. They won't block continuous events like rAFs, mousemoves, etc.\r\n\r\nWe implement this using the custom event system. The first thing that happens in the delegated event listener is that [we check if there are any pending discrete priority work (formerly known as \"interactive events\") and if there is, we flush it synchronously](https://github.com/facebook/react/blob/c954efa70f44a44be9c33c60c57f87bea6f40a10/packages/react-reconciler/src/ReactFiberScheduler.js#L2494-L2506). Only when that is done do we search the new tree to dispatch event listeners.\r\n\r\nIf we just attached event listeners directly on the nodes, we would have no opportunity to update these before they happen.\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14413",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14413/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14413/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14413/events",
    "html_url": "https://github.com/facebook/react/issues/14413",
    "id": 389336610,
    "node_id": "MDU6SXNzdWUzODkzMzY2MTA=",
    "number": 14413,
    "title": "useMemo gets called twice with Suspense",
    "user": {
      "login": "Ephem",
      "id": 7420167,
      "node_id": "MDQ6VXNlcjc0MjAxNjc=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7420167?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Ephem",
      "html_url": "https://github.com/Ephem",
      "followers_url": "https://api.github.com/users/Ephem/followers",
      "following_url": "https://api.github.com/users/Ephem/following{/other_user}",
      "gists_url": "https://api.github.com/users/Ephem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Ephem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Ephem/subscriptions",
      "organizations_url": "https://api.github.com/users/Ephem/orgs",
      "repos_url": "https://api.github.com/users/Ephem/repos",
      "events_url": "https://api.github.com/users/Ephem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Ephem/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-10T14:52:02Z",
    "updated_at": "2018-12-11T19:51:21Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nPossible (future) bug\r\n\r\n**What is the current behavior?**\r\n\r\nI have a feeling this might be a known tradeoff because of how the reconciler throws away an unfinished subtree when a Promise is thrown, but since it surprised me and wasn't documented I felt I should report it anyway. If it is known/intended, feel free to close.\r\n\r\nIf a component with useMemo re-renders because of a thrown Promise (Suspense), function is not memoized and gets called twice.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n\r\nhttps://codesandbox.io/s/72o4mznvr1\r\n\r\n**What is the expected behavior?**\r\n\r\nuseMemo gets called once?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\n16.7.0-alpha.2"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14408",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14408/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14408/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14408/events",
    "html_url": "https://github.com/facebook/react/issues/14408",
    "id": 389015181,
    "node_id": "MDU6SXNzdWUzODkwMTUxODE=",
    "number": 14408,
    "title": "SSR context issue: Warning: Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release",
    "user": {
      "login": "antonybudianto",
      "id": 7658554,
      "node_id": "MDQ6VXNlcjc2NTg1NTQ=",
      "avatar_url": "https://avatars1.githubusercontent.com/u/7658554?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/antonybudianto",
      "html_url": "https://github.com/antonybudianto",
      "followers_url": "https://api.github.com/users/antonybudianto/followers",
      "following_url": "https://api.github.com/users/antonybudianto/following{/other_user}",
      "gists_url": "https://api.github.com/users/antonybudianto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/antonybudianto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/antonybudianto/subscriptions",
      "organizations_url": "https://api.github.com/users/antonybudianto/orgs",
      "repos_url": "https://api.github.com/users/antonybudianto/repos",
      "events_url": "https://api.github.com/users/antonybudianto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/antonybudianto/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-09T11:57:16Z",
    "updated_at": "2018-12-10T01:00:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug, probably related https://github.com/facebook/react/pull/13829/files#diff-0ec201d2f87127ead696e6f5681e6830R1645\r\n\r\n**What is the current behavior?**\r\n```\r\nWarning: Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?\r\n```\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\nhttps://github.com/antonybudianto/react-context-issue\r\n`master` -> working branch (React 16.4.2)\r\n`repro-issue` -> branch with warning/issue (React 16.6.3)\r\n- npm install\r\n- npm start\r\n- open localhost:3000, and you can see the warning on the terminal where you run npm start (not dev console)\r\nI think it's SSR issue since no warning shown on client side\r\n\r\nHere is the React context API usage:\r\nhttps://github.com/antonybudianto/react-ua/blob/master/src/react-ua.js\r\n\r\nHere is the library usage:\r\n- client side Provider (https://github.com/antonybudianto/react-context-issue/blob/master/src/renderer/client.js#L22)\r\n- server side Provider (https://github.com/antonybudianto/react-context-issue/blob/master/src/renderer/app.js#L43)\r\n- Consumer (https://github.com/antonybudianto/react-context-issue/blob/master/src/routes/Home/HomeView.js#L59)\r\n\r\nI'm sure I don't use `<MyContext>` as a Customer/Provider as you see in the source.\r\n\r\n**What is the expected behavior?**\r\nIt should work without warning\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nWarning on React 16.6.3\r\nWorking well (no warning) on React 16.4.2\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14406",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14406/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14406/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14406/events",
    "html_url": "https://github.com/facebook/react/issues/14406",
    "id": 388941436,
    "node_id": "MDU6SXNzdWUzODg5NDE0MzY=",
    "number": 14406,
    "title": "Inference of Hooks’ inputs",
    "user": {
      "login": "yuchi",
      "id": 646609,
      "node_id": "MDQ6VXNlcjY0NjYwOQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/646609?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yuchi",
      "html_url": "https://github.com/yuchi",
      "followers_url": "https://api.github.com/users/yuchi/followers",
      "following_url": "https://api.github.com/users/yuchi/following{/other_user}",
      "gists_url": "https://api.github.com/users/yuchi/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yuchi/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yuchi/subscriptions",
      "organizations_url": "https://api.github.com/users/yuchi/orgs",
      "repos_url": "https://api.github.com/users/yuchi/repos",
      "events_url": "https://api.github.com/users/yuchi/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yuchi/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 5,
    "created_at": "2018-12-08T17:26:02Z",
    "updated_at": "2018-12-11T11:52:31Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I open this issue ([as suggested by @gaearon on Twitter](https://twitter.com/dan_abramov/status/1070770594323554310)) to discuss how Hook’s inputs argument should be inferred.\r\n\r\n## Background\r\n\r\nThe current [Hooks API reference](https://reactjs.org/docs/hooks-reference.html) cites (emphasis mine):\r\n\r\n> The array of inputs is not passed as arguments to the function. Conceptually, though, that’s what they represent: every value referenced inside the function should also appear in the inputs array. **In the future, a sufficiently advanced compiler could create this array automatically.**\r\n\r\nCaptivated by this sentence (and the idea of bringing “the future” closer) I built [`hooks.macro`][hm], a Babel Macro which tries to do exactly this. That is, to infer the second argument to `useMemo`, `useCallback` and `use*Effect` hooks.\r\n\r\nThe tool trasform this:\r\n\r\n```js\r\nimport { useAutoMemo } from 'hooks.macro';\r\nfunction MyComponent({ propValue }) {\r\n  return useAutoMemo(() => propValue.split('').join('-'));\r\n  //     ---^^^^----                                    ^ no inputs\r\n}\r\n```\r\n\r\nTo this:\r\n\r\n```js\r\nfunction MyComponent({ propValue }) {\r\n  return React.useMemo(() => propValue.split('').join('-'), [propValue]);\r\n  //     ^---^ ^-----^                                       ^-------^\r\n}\r\n```\r\n\r\nIn the process of designing the constraints of that tool, I realized there are more than a few open questions, whose answers can be found only with guidance from the core React team and a broader discussion with the community.\r\n\r\n## Rationale\r\n\r\nWhy should we bother with this topic? The reasons that motivated me in implementing `hooks.macro` were the following.\r\n\r\n1. Failing to populate the inputs array correctly has sad consequences:\r\n\r\n   1. too wide, and it will invalidate the use of memoization itself, and/or bring potential perf issues;\r\n\r\n   2. too narrow, and bugs can be tricky to identify (IMHO unit tests are not viable to avoid this: you need to test _changes_, not just different possible _values_;)\r\n\r\n   3. bugs caused by having non local values are potentially non deterministic.\r\n\r\n2. Keeping the inputs array updated is important, but it’s a matter of discipline:\r\n\r\n   1. when I change the “body” of the hook I need to check it;\r\n\r\n   2. when I change the semantics of a used valued I need to verify if I need to include it (e.g. when it was a constant and now a prop);\r\n\r\n   3. not introducing bugs during merge conflicts is matter of even _higher_ discipline (since usually inputs will fit in a single line, you probably need to edit the line to solve the conflict).\r\n\r\n3. By removing the burden of adding the inputs array, we reduce the mental overhead of using the memoizing hooks (namely `useMemo` and `useCallback`). This let us:\r\n\r\n   1. make following the best practices easier,\r\n\r\n   2. encourage the use of memoization in unexpected places (such as directly inside the final returning JSX of a component).\r\n\r\n4. Nothing is stopping me from shooting my own feet with obvious errors (such as passing the result of a non-memoized array literal ad an input). If a stable enough approach is found, this could be even solved automatically by memoizing all necessary inputs too.\r\n\r\n5. It’s an error-prone and boring practice that can be automated away.\r\n\r\n## Current implementation\r\n\r\n(Straight from [`hooks.macro`’s README][hm])\r\n\r\n#### Features\r\n\r\n1. Extracts all references used, and adds them to the _inputs_ array.\r\n\r\n2. Favors **strict correctness over performance**, but uses **safe optimizations:**\r\n\r\n   1. skips constants and useless inputs;\r\n\r\n   2. traverses all functions called or referenced, and appends _their_ dependencies too, removing the need for unnecessary `useCallback` hooks.\r\n\r\n#### Constraints\r\n\r\n1. Only variables created in the scope of the component body are automatically trapped as inputs.\r\n\r\n2. Only variables, and not properties’ access, are trapped. This means that if you use `obj.prop` only `[obj]` will become part of the memoization invalidation keys. This is a problem for refs, and will be addressed specifically in a future release.\r\n\r\n   You can work around this limitation by creating a variable which holds the current value, such as `const { current } = ref`.\r\n\r\n3. Currently there’s no way to add additional keys for more fine grained cache invalidation. Could be an important escape hatch when you do nasty things, but in that case I’d prefer to use `useMemo`/`useCallback` directly.\r\n\r\n4. Only locally defined functions declarations and explicit function expressions (`let x = () => {}`) are traversed for indirect dependencies — all other function calls (such as `xxx()`) are treated as normal input dependencies and appended too. This is unnecessary (but not harmful) for setters coming from `useState`, and not an issue at all if the function is the result of `useCallback` or `useAutoCallback`.\r\n\r\n## Questions\r\n\r\nAs I said before I have few open questions for the core React team, but I’m sure the whole community will be impactful in the discussion.\r\n\r\n1. What were/are the requirements of the «sufficiently advanced compiler» you envision? Is the current approach of `hooks.macro` aligned with those?\r\n\r\n2. Using a broader approach, Flow/TypeScript hints could give an incredible amount of precision not available on the pure Babel pipeline. I feel pre-pack can help here too (we could help pre-pack do its thing actually) but I’m not sure how.\r\n\r\n3. Are users potentially scared by the amount of black magic involved? I _tried_ to follow the Hooks lead by having very clear, very understandable rules. Is this _enough_?\r\n\r\n4. The auto-callback feature of `useMemo` (you don’t need an arrow function) has received the most negative feedback in the small discussions I had online. Yet I personally find the most interesting hook of this library, since adds so little overhead I can throw it any time I need… potentially abusing it eventually (so, points against it?)\r\n\r\n5. I personally prefer to have a different API that makes it clear that those are not standard hooks without \"inputs\". A Babel plugin that transform all hooks without an explicit inputs array seems silly and scary — you get used to _not_ passing them and you don't have the API signaling you that you need to.\r\n\r\n6. Since this is a specialized form of lambda-lifting, are you willing to add some advanced hooks (with one of your lovely silly prefixes such as `DONT_USE_`) that pass the inputs as arguments to creator/effect function? This open some interesting perf optimization opportunities by hoisting functions higher up.\r\n\r\n[hm]: https://github.com/yuchi/hooks.macro\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14404",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14404/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14404/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14404/events",
    "html_url": "https://github.com/facebook/react/issues/14404",
    "id": 388884277,
    "node_id": "MDU6SXNzdWUzODg4ODQyNzc=",
    "number": 14404,
    "title": "eslint-plugin-react-hooks doesn't report error when calling Hooks inside conditions",
    "user": {
      "login": "paboulos",
      "id": 5624815,
      "node_id": "MDQ6VXNlcjU2MjQ4MTU=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5624815?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paboulos",
      "html_url": "https://github.com/paboulos",
      "followers_url": "https://api.github.com/users/paboulos/followers",
      "following_url": "https://api.github.com/users/paboulos/following{/other_user}",
      "gists_url": "https://api.github.com/users/paboulos/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paboulos/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paboulos/subscriptions",
      "organizations_url": "https://api.github.com/users/paboulos/orgs",
      "repos_url": "https://api.github.com/users/paboulos/repos",
      "events_url": "https://api.github.com/users/paboulos/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paboulos/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 6,
    "created_at": "2018-12-08T04:31:01Z",
    "updated_at": "2018-12-08T18:15:50Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "I want to report a bug for the hooks plugin.\r\n\r\n**What is the current behavior?**\r\nThere was no error report after running eslint, but the component failed when running in the browser.\r\nFrom the chrome dev console it reported \"Uncaught Error: Rendered fewer hooks than expected. This may be caused by an accidental early return statement.\" \r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React.\r\nHere is a link to the github repo:\r\nhttps://github.com/paboulos/react-hooks-eslint\r\n\r\n**What is the expected behavior?**\r\nFollowed The Hooks API guide which says React hooks provides a linter plugin to enforce these rules automatically.Therefore it should have reported a usage violation when the eslint hooks plugin is specified. \r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\nUsing window 10 OS and Chrome browser.\r\n1. First ran npx create-react-app Hooks\r\n2. Installed react 16.7.0-alpha.2 and react-dom 16.7.0-alpha.2\r\n3. Installed eslint dev dependencies:\r\n \"babel-eslint\": \"9.0.0\",\r\n    \"babel-loader\": \"8.0.4\",\r\n    \"eslint\": \"5.9.0\",\r\n    \"eslint-config-airbnb\": \"17.1.0\",\r\n    \"eslint-loader\": \"2.1.1\",\r\n    \"eslint-plugin-import\": \"2.14.0\",\r\n    \"eslint-plugin-jsx-a11y\": \"6.1.2\",\r\n    \"eslint-plugin-react\": \"7.11.1\",\r\n    \"eslint-plugin-react-hooks\": \"0.0.0\"\r\n4. Created the .eslintrc.json following the instructions from the Hooks API Doc\r\nThen ran package script lint as follows: \"npm run lint\"\r\nno errors reported.\r\nThen ran package script start as follows: \"npm start\"\r\nThe React component CountHooks calls useState incorrectly and reports error in the browser dev console."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14398",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14398/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14398/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14398/events",
    "html_url": "https://github.com/facebook/react/issues/14398",
    "id": 388264035,
    "node_id": "MDU6SXNzdWUzODgyNjQwMzU=",
    "number": 14398,
    "title": "calculating context changes in componentDidUpdate",
    "user": {
      "login": "Lexicality",
      "id": 847422,
      "node_id": "MDQ6VXNlcjg0NzQyMg==",
      "avatar_url": "https://avatars2.githubusercontent.com/u/847422?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Lexicality",
      "html_url": "https://github.com/Lexicality",
      "followers_url": "https://api.github.com/users/Lexicality/followers",
      "following_url": "https://api.github.com/users/Lexicality/following{/other_user}",
      "gists_url": "https://api.github.com/users/Lexicality/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Lexicality/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Lexicality/subscriptions",
      "organizations_url": "https://api.github.com/users/Lexicality/orgs",
      "repos_url": "https://api.github.com/users/Lexicality/repos",
      "events_url": "https://api.github.com/users/Lexicality/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Lexicality/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 2,
    "created_at": "2018-12-06T15:26:50Z",
    "updated_at": "2018-12-07T10:47:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nThere is no way to see if `componentDidMount` was caused by a context change\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to your JSFiddle (https://jsfiddle.net/Luktwrdm/) or CodeSandbox (https://codesandbox.io/s/new) example below:**\r\n```typescript\r\nimport React from 'react';\r\n\r\ninterface ExampleContext {\r\n    param: string;\r\n}\r\n\r\nconst ExampleContext = React.createContext<ExampleContext>({\r\n    param: 'foo',\r\n});\r\n\r\ninterface ExampleState {\r\n    data: any;\r\n}\r\n\r\nclass Example extends React.Component<{}, ExampleState> {\r\n    static contextType = ExampleContext;\r\n    context!: ExampleContext;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            data: [],\r\n        };\r\n    }\r\n\r\n    fetchData(param: string): void {\r\n        // whatever\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchData(this.context.param);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // ???        \r\n    }\r\n}\r\n```\r\n**What is the expected behavior?**\r\nA 4th parameter for `previousContext`\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.6"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14397",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14397/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14397/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14397/events",
    "html_url": "https://github.com/facebook/react/pull/14397",
    "id": 388220291,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM2NTM0ODk3",
    "number": 14397,
    "title": "Add flow type check to some function of ReactFiberBeginWork",
    "user": {
      "login": "yanglin5689446",
      "id": 12843409,
      "node_id": "MDQ6VXNlcjEyODQzNDA5",
      "avatar_url": "https://avatars3.githubusercontent.com/u/12843409?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/yanglin5689446",
      "html_url": "https://github.com/yanglin5689446",
      "followers_url": "https://api.github.com/users/yanglin5689446/followers",
      "following_url": "https://api.github.com/users/yanglin5689446/following{/other_user}",
      "gists_url": "https://api.github.com/users/yanglin5689446/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/yanglin5689446/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/yanglin5689446/subscriptions",
      "organizations_url": "https://api.github.com/users/yanglin5689446/orgs",
      "repos_url": "https://api.github.com/users/yanglin5689446/repos",
      "events_url": "https://api.github.com/users/yanglin5689446/events{/privacy}",
      "received_events_url": "https://api.github.com/users/yanglin5689446/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-06T13:45:06Z",
    "updated_at": "2018-12-06T13:45:14Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14397",
      "html_url": "https://github.com/facebook/react/pull/14397",
      "diff_url": "https://github.com/facebook/react/pull/14397.diff",
      "patch_url": "https://github.com/facebook/react/pull/14397.patch"
    },
    "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14387",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14387/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14387/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14387/events",
    "html_url": "https://github.com/facebook/react/issues/14387",
    "id": 387086723,
    "node_id": "MDU6SXNzdWUzODcwODY3MjM=",
    "number": 14387,
    "title": "useEffect(effect, [ref.current]) is prematurely re-running",
    "user": {
      "login": "1000hz",
      "id": 1395018,
      "node_id": "MDQ6VXNlcjEzOTUwMTg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/1395018?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/1000hz",
      "html_url": "https://github.com/1000hz",
      "followers_url": "https://api.github.com/users/1000hz/followers",
      "following_url": "https://api.github.com/users/1000hz/following{/other_user}",
      "gists_url": "https://api.github.com/users/1000hz/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/1000hz/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/1000hz/subscriptions",
      "organizations_url": "https://api.github.com/users/1000hz/orgs",
      "repos_url": "https://api.github.com/users/1000hz/repos",
      "events_url": "https://api.github.com/users/1000hz/events{/privacy}",
      "received_events_url": "https://api.github.com/users/1000hz/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-12-04T02:05:07Z",
    "updated_at": "2018-12-05T20:47:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "<!--\r\n  Note: if the issue is about documentation or the website, please file it at:\r\n  https://github.com/reactjs/reactjs.org/issues/new\r\n-->\r\n\r\n**Do you want to request a *feature* or report a *bug*?**\r\nBug\r\n\r\n**What is the current behavior?**\r\nIt seems `useEffect(effect, [ref.current])` is re-running under certain circumstances without the current ref identity changing.\r\n\r\n**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React:**\r\nhttps://codesandbox.io/s/qkzl9xjj44\r\n\r\n**What is the expected behavior?**\r\nIn this example, the effect should only be run once, not re-run (and thus cleaned up) upon clicking the button for the first time. The `isActive` state should be returned to false on mouseup. `CLEAN UP!` should not be logged to the console since the ref hasn't been reassigned.\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n16.7.0-alpha.2 (affects all environments)"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14382",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14382/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14382/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14382/events",
    "html_url": "https://github.com/facebook/react/pull/14382",
    "id": 386849242,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1NDcxNTYw",
    "number": 14382,
    "title": "[WIP] Add base implementation of React Fire",
    "user": {
      "login": "trueadm",
      "id": 1519870,
      "node_id": "MDQ6VXNlcjE1MTk4NzA=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/1519870?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/trueadm",
      "html_url": "https://github.com/trueadm",
      "followers_url": "https://api.github.com/users/trueadm/followers",
      "following_url": "https://api.github.com/users/trueadm/following{/other_user}",
      "gists_url": "https://api.github.com/users/trueadm/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/trueadm/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/trueadm/subscriptions",
      "organizations_url": "https://api.github.com/users/trueadm/orgs",
      "repos_url": "https://api.github.com/users/trueadm/repos",
      "events_url": "https://api.github.com/users/trueadm/events{/privacy}",
      "received_events_url": "https://api.github.com/users/trueadm/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-12-03T14:43:27Z",
    "updated_at": "2018-12-10T12:30:59Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14382",
      "html_url": "https://github.com/facebook/react/pull/14382",
      "diff_url": "https://github.com/facebook/react/pull/14382.diff",
      "patch_url": "https://github.com/facebook/react/pull/14382.patch"
    },
    "body": "This an initial work-in-progress PR for React Fire. Better description to come at some point along with a TODO checklist. For more context, see the tracking issue #13525."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14381",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14381/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14381/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14381/events",
    "html_url": "https://github.com/facebook/react/pull/14381",
    "id": 386752825,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjM1Mzk2NTQ4",
    "number": 14381,
    "title": "refactor: remove unnecessary extra line for feature flags",
    "user": {
      "login": "armand1m",
      "id": 6154901,
      "node_id": "MDQ6VXNlcjYxNTQ5MDE=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/6154901?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/armand1m",
      "html_url": "https://github.com/armand1m",
      "followers_url": "https://api.github.com/users/armand1m/followers",
      "following_url": "https://api.github.com/users/armand1m/following{/other_user}",
      "gists_url": "https://api.github.com/users/armand1m/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/armand1m/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/armand1m/subscriptions",
      "organizations_url": "https://api.github.com/users/armand1m/orgs",
      "repos_url": "https://api.github.com/users/armand1m/repos",
      "events_url": "https://api.github.com/users/armand1m/events{/privacy}",
      "received_events_url": "https://api.github.com/users/armand1m/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 196858374,
        "node_id": "MDU6TGFiZWwxOTY4NTgzNzQ=",
        "url": "https://api.github.com/repos/facebook/react/labels/CLA%20Signed",
        "name": "CLA Signed",
        "color": "e7e7e7",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-12-03T10:31:52Z",
    "updated_at": "2018-12-04T13:02:48Z",
    "closed_at": null,
    "author_association": "NONE",
    "pull_request": {
      "url": "https://api.github.com/repos/facebook/react/pulls/14381",
      "html_url": "https://github.com/facebook/react/pull/14381",
      "diff_url": "https://github.com/facebook/react/pull/14381.diff",
      "patch_url": "https://github.com/facebook/react/pull/14381.patch"
    },
    "body": "**Before submitting a pull request,** please make sure the following is done:\r\n\r\n1. Fork [the repository](https://github.com/facebook/react) and create your branch from `master`.\r\n2. Run `yarn` in the repository root.\r\n3. If you've fixed a bug or added code that should be tested, add tests!\r\n4. Ensure the test suite passes (`yarn test`). Tip: `yarn test --watch TestName` is helpful in development.\r\n5. Run `yarn test-prod` to test in the production environment. It supports the same options as `yarn test`.\r\n6. If you need a debugger, run `yarn debug-test --watch TestName`, open `chrome://inspect`, and press \"Inspect\".\r\n7. Format your code with [prettier](https://github.com/prettier/prettier) (`yarn prettier`).\r\n8. Make sure your code lints (`yarn lint`). Tip: `yarn linc` to only check changed files.\r\n9. Run the [Flow](https://flowtype.org/) typechecks (`yarn flow`).\r\n10. If you haven't already, complete the CLA.\r\n\r\n**Learn more about contributing:** https://reactjs.org/docs/how-to-contribute.html\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14380",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14380/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14380/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14380/events",
    "html_url": "https://github.com/facebook/react/issues/14380",
    "id": 386706996,
    "node_id": "MDU6SXNzdWUzODY3MDY5OTY=",
    "number": 14380,
    "title": "Old references retained by memoizedProps in fiber",
    "user": {
      "login": "emilschutte",
      "id": 649549,
      "node_id": "MDQ6VXNlcjY0OTU0OQ==",
      "avatar_url": "https://avatars3.githubusercontent.com/u/649549?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilschutte",
      "html_url": "https://github.com/emilschutte",
      "followers_url": "https://api.github.com/users/emilschutte/followers",
      "following_url": "https://api.github.com/users/emilschutte/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilschutte/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilschutte/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilschutte/subscriptions",
      "organizations_url": "https://api.github.com/users/emilschutte/orgs",
      "repos_url": "https://api.github.com/users/emilschutte/repos",
      "events_url": "https://api.github.com/users/emilschutte/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilschutte/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 710722093,
        "node_id": "MDU6TGFiZWw3MTA3MjIwOTM=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Needs%20Investigation",
        "name": "Type: Needs Investigation",
        "color": "fbca04",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 3,
    "created_at": "2018-12-03T08:27:12Z",
    "updated_at": "2018-12-03T20:43:29Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\n\r\nBug (or misunderstanding on my part)\r\n\r\n**What is the current behavior?**\r\n\r\nFibers seem to retain stale references to old data via `memoizedProps` / `memoizedState`\r\n\r\n**Demo:**\r\n\r\nhttps://jsfiddle.net/0tfq4p5r/\r\n\r\nThis demo just puts some big strings in the state (and into the props of a child component).  If you click the button it will replace the array of strings with an empty array.  At this point if you inspect the memory usage you will see that both `memoizedState` and `memoizedProps` are still holding references to the original array of strings and that memory can't be collected.\r\n\r\n**What is the expected behavior?**\r\n\r\nI was expecting no references to the old data to be retained, so that the memory could be reclaimed immediately.\r\n\r\nI ran into this when testing an app with a large dataset that is near my browser's heap limit.  If I want to replace that with a different, equally large dataset, and I attempt to make the first large dataset GC-able by removing it from my Redux store before putting the second dataset in the store, I wind up with the old dataset still resident in memory due to being retained by `memoizedProps` of a fiber.\r\n\r\nI noticed this PR that sounds possibly related:\r\n\r\nhttps://github.com/facebook/react/pull/14276\r\n\r\nand tested against current master ([f1bf281](https://github.com/facebook/react/commit/f1bf281605444b342f4c37718092accbe3f98702)) but still had the issue with `memoizedProps`.\r\n\r\nRight now I'm working around this by clearing the props twice consecutively before loading the new data.  Is that the intended solution for this situation?\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nmacOS High Sierra 10.13.6 (17G65)\r\nChrome Version 70.0.3538.110 (Official Build) (64-bit)\r\nReact 16.6.3\r\nDon't know about previous versions of React."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14377",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14377/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14377/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14377/events",
    "html_url": "https://github.com/facebook/react/issues/14377",
    "id": 386623497,
    "node_id": "MDU6SXNzdWUzODY2MjM0OTc=",
    "number": 14377,
    "title": "[Scheduler] Add support for delayed scheduling of callbacks.",
    "user": {
      "login": "bordoley",
      "id": 2886153,
      "node_id": "MDQ6VXNlcjI4ODYxNTM=",
      "avatar_url": "https://avatars2.githubusercontent.com/u/2886153?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/bordoley",
      "html_url": "https://github.com/bordoley",
      "followers_url": "https://api.github.com/users/bordoley/followers",
      "following_url": "https://api.github.com/users/bordoley/following{/other_user}",
      "gists_url": "https://api.github.com/users/bordoley/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/bordoley/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/bordoley/subscriptions",
      "organizations_url": "https://api.github.com/users/bordoley/orgs",
      "repos_url": "https://api.github.com/users/bordoley/repos",
      "events_url": "https://api.github.com/users/bordoley/events{/privacy}",
      "received_events_url": "https://api.github.com/users/bordoley/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 1155972012,
        "node_id": "MDU6TGFiZWwxMTU1OTcyMDEy",
        "url": "https://api.github.com/repos/facebook/react/labels/Component:%20Scheduler",
        "name": "Component: Scheduler",
        "color": "9de8f9",
        "default": false
      },
      {
        "id": 121709921,
        "node_id": "MDU6TGFiZWwxMjE3MDk5MjE=",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Feature%20Request",
        "name": "Type: Feature Request",
        "color": "c7def8",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-03T01:04:57Z",
    "updated_at": "2018-12-10T01:06:51Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Has the React team considered adding the ability to specify a time delay when scheduling callbacks on Scheduler. This would be useful to enable using Scheduler as a general scheduling solution in a JS environment, removing the need to use and manage setTimeouts/setInterval calls. "
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14374",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14374/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14374/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14374/events",
    "html_url": "https://github.com/facebook/react/issues/14374",
    "id": 386560024,
    "node_id": "MDU6SXNzdWUzODY1NjAwMjQ=",
    "number": 14374,
    "title": "Allow suppressing the warning for missing keys.",
    "user": {
      "login": "flying-sheep",
      "id": 291575,
      "node_id": "MDQ6VXNlcjI5MTU3NQ==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/291575?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/flying-sheep",
      "html_url": "https://github.com/flying-sheep",
      "followers_url": "https://api.github.com/users/flying-sheep/followers",
      "following_url": "https://api.github.com/users/flying-sheep/following{/other_user}",
      "gists_url": "https://api.github.com/users/flying-sheep/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/flying-sheep/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/flying-sheep/subscriptions",
      "organizations_url": "https://api.github.com/users/flying-sheep/orgs",
      "repos_url": "https://api.github.com/users/flying-sheep/repos",
      "events_url": "https://api.github.com/users/flying-sheep/events{/privacy}",
      "received_events_url": "https://api.github.com/users/flying-sheep/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 8,
    "created_at": "2018-12-02T13:32:32Z",
    "updated_at": "2018-12-12T11:39:38Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "There are valid use cases for not wanting to use keys, if you e.g. render strongly differing trees (like e.g. blog posts) or have a function that returns always the same array of items.\r\n\r\nWhen you don’t provide an explicit key, React will internally use the index as key and emit a warning – however you would want to silence the warning, as using the index here is perfectly valid.\r\n\r\nThis doesn’t currently seem to be possible however, which has the sad consequence that you either have to make your code more complex for no reason (manually adding useless keys) or you have to live with the warnings (which means that valid warnings might be lost among the noise).\r\n\r\nThe [article](https://medium.com/@robinpokorny/index-as-a-key-is-an-anti-pattern-e0349aece318) quoted in the [docs](https://reactjs.org/docs/lists-and-keys.html#keys) states the conditions in which using the default behavior is valid:\r\n\r\n> 1. the list and items are static–they are not computed and do not change;\r\n> 2. the items in the list have no ids;\r\n> 3. the list is never reordered or filtered."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14373",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14373/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14373/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14373/events",
    "html_url": "https://github.com/facebook/react/issues/14373",
    "id": 386511978,
    "node_id": "MDU6SXNzdWUzODY1MTE5Nzg=",
    "number": 14373,
    "title": "Using reducer/state inside useEffect()",
    "user": {
      "login": "babloo80",
      "id": 3709328,
      "node_id": "MDQ6VXNlcjM3MDkzMjg=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/3709328?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/babloo80",
      "html_url": "https://github.com/babloo80",
      "followers_url": "https://api.github.com/users/babloo80/followers",
      "following_url": "https://api.github.com/users/babloo80/following{/other_user}",
      "gists_url": "https://api.github.com/users/babloo80/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/babloo80/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/babloo80/subscriptions",
      "organizations_url": "https://api.github.com/users/babloo80/orgs",
      "repos_url": "https://api.github.com/users/babloo80/repos",
      "events_url": "https://api.github.com/users/babloo80/events{/privacy}",
      "received_events_url": "https://api.github.com/users/babloo80/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-02T00:18:17Z",
    "updated_at": "2018-12-02T00:35:12Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nThis may be a bug or the way useEffect() works.\r\n\r\n**What is the current behavior?**\r\nState values are not updated when used inside an effect (the effect is intended to be executed only once)\r\n\r\n```javascript\r\nimport React, {useEffect, useState} from 'react'\r\n\r\nconst App = (props) => {\r\n  const [count, setCount] = useState(0)\r\n\r\n  useEffect( () => {\r\n    const interval1 = setInterval(() => {\r\n      console.log('interval 1:', count) //output 'interval 1: 0'\r\n    }, 4000)\r\n\r\n    return () => {\r\n      clearInterval(interval1)\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {count}\r\n      <button onClick={() => setCount(count+1)}>Count</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n```\r\nThe code would work as expected when `useEffect( () => {...})` is used without watching for `[]`, but then the interval would go thru new subscriptions cycles for every state change. Is this an expected behavior?\r\n\r\nI am sort of experimenting to use rxjs to subscribe to certain events that looks at state/reducer values. \r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? **\r\n`\"react\": \"^16.7.0-alpha.2\"`"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14371",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14371/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14371/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14371/events",
    "html_url": "https://github.com/facebook/react/issues/14371",
    "id": 386484667,
    "node_id": "MDU6SXNzdWUzODY0ODQ2Njc=",
    "number": 14371,
    "title": "DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.",
    "user": {
      "login": "Gunapvkn",
      "id": 45519941,
      "node_id": "MDQ6VXNlcjQ1NTE5OTQx",
      "avatar_url": "https://avatars0.githubusercontent.com/u/45519941?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Gunapvkn",
      "html_url": "https://github.com/Gunapvkn",
      "followers_url": "https://api.github.com/users/Gunapvkn/followers",
      "following_url": "https://api.github.com/users/Gunapvkn/following{/other_user}",
      "gists_url": "https://api.github.com/users/Gunapvkn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Gunapvkn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Gunapvkn/subscriptions",
      "organizations_url": "https://api.github.com/users/Gunapvkn/orgs",
      "repos_url": "https://api.github.com/users/Gunapvkn/repos",
      "events_url": "https://api.github.com/users/Gunapvkn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Gunapvkn/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2018-12-01T18:38:04Z",
    "updated_at": "2018-12-08T10:54:40Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "Hi All,\r\n\r\nI am facing some issues regarding react + redux. since i am new to this i have created a component wich is using ReactFullPage. I have a login page there i am having a signup link under. \r\n\r\n**Home page which is having a sign in component :** \r\n\r\nclass Home extends Component {\r\n\trender () {\r\n\t\tconst { isSignInRequest, isSignUpRequest, isForgotPasswordRequest, onSignUpRequest, onForgotPasswordRequest, onSignInRequest} = this.props;\r\n\t\treturn( \r\n\t\t\t<div>\r\n\t\t\t<ReactFullpage {...fullpageOptions} \r\n\t\t\t\trender = \r\n\t\t\t\t{\r\n\t\t\t\t\t({ state, fullpageApi }) => {\r\n\t\t\t\t      return (\r\n\t\t\t\t        <div id='fullpage-wrapper'>\r\n\t\t\t\t\t          <div className='section section1'>\r\n\t\t\t\t\t\t\t\t\t{ isForgotPasswordRequest === true ? <ForgotPassword signUpRequest={onSignUpRequest}  signInRequest={onSignInRequest} /> : \r\n\t\t\t\t\t\t\t\t\t( isSignUpRequest === true ? <SignUp signInRequest={onSignInRequest} forgotPasswordRequest = {onForgotPasswordRequest}/> : \r\n\t\t\t\t\t\t\t\t\t<SignIn signUpRequest={onSignUpRequest} forgotPasswordRequest = {onForgotPasswordRequest}/> ) }\r\n\t\t\t\t\t          </div>\r\n\t\t\t\t\t          <div className='section'>\r\n\t\t\t\t\t          </div>\r\n\t\t\t\t\t          <div className='section'>\r\n\t\t\t\t\t          </div>\r\n\t\t\t\t\t          <div className='section'>\r\n\t\t\t\t\t          </div>\r\n\t\t\t\t\t          <div className='section'>\r\n\t\t\t\t\t          </div>\r\n\t\t\t\t\t    </div>\r\n\t\t\t\t      );\r\n    \t\t\t\t}\r\n    \t\t\t}\r\n   \t\t\t/>\r\n   \t\t\t</div>\r\n   \t\t);\r\n\t}\r\n}\r\n\r\n**I am having sign in component**\r\n\r\nclass SignIn extends Component {\r\n  render() {\r\n      return (\r\n          <MDBContainer className='mdbContainer '>\r\n            <MDBRow>\r\n              <MDBCol md='5' className='loginContainer rounded z-depth-5'>\r\n                <form>\r\n                  <div className='grey-text'>\r\n                    <MDBInput className='inputContainer'\r\n                      label='Type your email'\r\n                      icon='envelope'\r\n                      group\r\n                      type='email'\r\n                      validate\r\n                      error='wrong'\r\n                      success='right'\r\n                    />\r\n                    <MDBInput className='passwordContainer'\r\n                      label='Type your password'\r\n                      icon='lock'\r\n                      group\r\n                      type='password'\r\n                      validate\r\n                    />\r\n                  </div>\r\n                  <div className='text-center '>\r\n                    <MDBBtn className='submitButton' >Login</MDBBtn>\r\n                    <MDBModalFooter>\r\n                        <div className='font-weight-light'>\r\n                          <p>Not a member? <span onClick={this.props.signUpRequest} style={{color:'#007bff', cursor:'pointer'}}>Sign Up</span></p>\r\n                          <span style={{color:'#007bff', cursor:'pointer'}}> Forgot Password?</span>\r\n                        </div>\r\n                    </MDBModalFooter>\r\n                  </div>\r\n                </form>\r\n              </MDBCol>\r\n            </MDBRow>\r\n          </MDBContainer>\r\n        );\r\n      }\r\n}\r\n\r\nwhen i click on signup i getting the above mentioned issue \r\n\r\n**DOMException: Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node.**\r\n\r\nKindly help me to resolve this issue."
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14369",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14369/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14369/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14369/events",
    "html_url": "https://github.com/facebook/react/issues/14369",
    "id": 386443099,
    "node_id": "MDU6SXNzdWUzODY0NDMwOTk=",
    "number": 14369,
    "title": "setState hook inside useEffect can cause unavoidable warning  Can't perform a React state update",
    "user": {
      "login": "istarkov",
      "id": 5077042,
      "node_id": "MDQ6VXNlcjUwNzcwNDI=",
      "avatar_url": "https://avatars3.githubusercontent.com/u/5077042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/istarkov",
      "html_url": "https://github.com/istarkov",
      "followers_url": "https://api.github.com/users/istarkov/followers",
      "following_url": "https://api.github.com/users/istarkov/following{/other_user}",
      "gists_url": "https://api.github.com/users/istarkov/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/istarkov/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/istarkov/subscriptions",
      "organizations_url": "https://api.github.com/users/istarkov/orgs",
      "repos_url": "https://api.github.com/users/istarkov/repos",
      "events_url": "https://api.github.com/users/istarkov/events{/privacy}",
      "received_events_url": "https://api.github.com/users/istarkov/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-01T09:52:16Z",
    "updated_at": "2018-12-03T11:07:23Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**BUG**\r\n\r\n**What is the current behavior?**\r\n\r\nExample: https://codesandbox.io/s/6y1x2zr21n clicking on OK button cause `Warning: Can't perform a React state update on an unmounted component.`\r\n\r\nThe problem that unsubscribe is called during B event `setVisible(v => false);` call, see logs:\r\n\r\n```\r\nSET VISIBLE BEFORE \r\nUNSUBSCRIBE \r\nWarning: Can't perform a React state update on an unmounted component. This is a no-op, but it indicates a memory leak in your application. To fix, cancel all subscriptions and asynchronous tasks in a useEffect cleanup function.\r\n    in Child (created by Holder)\r\nSET VISIBLE AFTER \r\n```\r\n\r\nIn our case we have this even without RAF call, but on `transitionend` DOM event.\r\n(It's occurred randomly and rare in our codebase as transitionend event should be called exactly at needed time, but example showed what happens)\r\nSeems like it occurred only if you have a `setState` call during useEffect callback like `setRefresh(v => v + 1);` (_inside provided code_) (_after rewriting our codebase to avoid setState calls in useEffect the error has gone_)\r\n\r\n\r\nCode\r\n```javascript\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport mitt from \"mitt\";\r\n\r\nconst emitter = mitt();\r\n\r\nconst Child = () => {\r\n  const [visible, setVisible] = React.useReducer((s, a) => a, true);\r\n  React.useEffect(() => {\r\n    const handle = () => {\r\n      console.log(\"SET VISIBLE BEFORE\");\r\n      setVisible(v => false); // <--- THIS CALL CAUSES UNSUBSCRIBE AND WARNING ABOUT STATE\r\n      console.log(\"SET VISIBLE AFTER\");\r\n    };\r\n    emitter.on(\"B\", handle);\r\n    return () => {\r\n      console.log(\"UNSUBSCRIBE\");\r\n      emitter.off(\"B\", handle);\r\n    };\r\n  }, []);\r\n\r\n  return <div>{visible && <h1>CHILD TEXT</h1>}</div>;\r\n};\r\n\r\nconst Holder = () => {\r\n  const [refresh, setRefresh] = React.useState(0);\r\n  const visible = React.useRef(true);\r\n  React.useEffect(() => {\r\n    if (refresh === 1) {\r\n      visible.current = false;\r\n      setRefresh(v => v + 1); // <--- This state change from effect caused problems\r\n    }\r\n    const handle = () => {\r\n      setRefresh(v => v + 1);\r\n    };\r\n    emitter.on(\"A\", handle);\r\n    return () => {\r\n      emitter.off(\"A\", handle);\r\n    };\r\n  });\r\n\r\n  return <div>{visible.current && <Child />}</div>;\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Holder />\r\n      <button\r\n        onClick={() => {\r\n          emitter.emit(\"A\", {});\r\n\r\n          requestAnimationFrame(() => {\r\n            emitter.emit(\"B\", {});\r\n          });\r\n        }}\r\n      >\r\n        OK\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<App />, rootElement);\r\n\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nDo not provide warning if unsubscription is called during \"setState\" call.\r\n\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\nReact 16.7.0-alpha.2\r\n"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14367",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14367/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14367/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14367/events",
    "html_url": "https://github.com/facebook/react/issues/14367",
    "id": 386438984,
    "node_id": "MDU6SXNzdWUzODY0Mzg5ODQ=",
    "number": 14367,
    "title": "Please turn off \"Download the React DevTools\" console message",
    "user": {
      "login": "alexeypetrushin",
      "id": 94196,
      "node_id": "MDQ6VXNlcjk0MTk2",
      "avatar_url": "https://avatars3.githubusercontent.com/u/94196?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/alexeypetrushin",
      "html_url": "https://github.com/alexeypetrushin",
      "followers_url": "https://api.github.com/users/alexeypetrushin/followers",
      "following_url": "https://api.github.com/users/alexeypetrushin/following{/other_user}",
      "gists_url": "https://api.github.com/users/alexeypetrushin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/alexeypetrushin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/alexeypetrushin/subscriptions",
      "organizations_url": "https://api.github.com/users/alexeypetrushin/orgs",
      "repos_url": "https://api.github.com/users/alexeypetrushin/repos",
      "events_url": "https://api.github.com/users/alexeypetrushin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/alexeypetrushin/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 0,
    "created_at": "2018-12-01T08:49:51Z",
    "updated_at": "2018-12-01T08:50:09Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "It's really annoying!"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14362",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14362/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14362/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14362/events",
    "html_url": "https://github.com/facebook/react/issues/14362",
    "id": 386202814,
    "node_id": "MDU6SXNzdWUzODYyMDI4MTQ=",
    "number": 14362,
    "title": "react-hooks linter fails with unusual for loop",
    "user": {
      "login": "TrySound",
      "id": 5635476,
      "node_id": "MDQ6VXNlcjU2MzU0NzY=",
      "avatar_url": "https://avatars0.githubusercontent.com/u/5635476?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TrySound",
      "html_url": "https://github.com/TrySound",
      "followers_url": "https://api.github.com/users/TrySound/followers",
      "following_url": "https://api.github.com/users/TrySound/following{/other_user}",
      "gists_url": "https://api.github.com/users/TrySound/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TrySound/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TrySound/subscriptions",
      "organizations_url": "https://api.github.com/users/TrySound/orgs",
      "repos_url": "https://api.github.com/users/TrySound/repos",
      "events_url": "https://api.github.com/users/TrySound/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TrySound/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [
      {
        "id": 40929151,
        "node_id": "MDU6TGFiZWw0MDkyOTE1MQ==",
        "url": "https://api.github.com/repos/facebook/react/labels/Type:%20Bug",
        "name": "Type: Bug",
        "color": "b60205",
        "default": false
      }
    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-11-30T14:11:12Z",
    "updated_at": "2018-12-02T20:04:24Z",
    "closed_at": null,
    "author_association": "CONTRIBUTOR",
    "body": "**Do you want to request a *feature* or report a *bug*?**\r\nbug\r\n**What is the current behavior?**\r\nReact hooks linter fails with this piece of code\r\n\r\n```js\r\nfunction useHook() {\r\n  const ref = React.useRef([1, 2, 3]);\r\n  const res = []\r\n  // valid because there are not unexpected returns\r\n  if (ref.current) {\r\n    for (let i = 0; i !== ref.current.length && !ref.current[i]; ++i ) {\r\n      res.push(ref.current[i]);\r\n    }\r\n  }\r\n  React.useLayoutEffect(() => {});\r\n}\r\n```\r\n\r\nhowever a bit more usual for loop is handled as expected\r\n```js\r\nfunction useHook() {\r\n  const ref = React.useRef([1, 2, 3]);\r\n  const res = []\r\n  if (ref.current) {\r\n    for (let i = 0; i !== ref.current.length; ++i ) {\r\n      res.push(ref.current[i]);\r\n    }\r\n  }\r\n  React.useLayoutEffect(() => {});\r\n}\r\n```\r\n\r\n**What is the expected behavior?**\r\n\r\nSkip for looks without returns\r\n\r\n**Which versions of React, and which browser / OS are affected by this issue? Did this work in previous versions of React?**\r\n\r\neslint-plugin-react-hooks 0.0.0"
  },
  {
    "url": "https://api.github.com/repos/facebook/react/issues/14361",
    "repository_url": "https://api.github.com/repos/facebook/react",
    "labels_url": "https://api.github.com/repos/facebook/react/issues/14361/labels{/name}",
    "comments_url": "https://api.github.com/repos/facebook/react/issues/14361/comments",
    "events_url": "https://api.github.com/repos/facebook/react/issues/14361/events",
    "html_url": "https://github.com/facebook/react/issues/14361",
    "id": 386001115,
    "node_id": "MDU6SXNzdWUzODYwMDExMTU=",
    "number": 14361,
    "title": "Question: Building react with sourcemaps",
    "user": {
      "login": "nprasath002",
      "id": 581008,
      "node_id": "MDQ6VXNlcjU4MTAwOA==",
      "avatar_url": "https://avatars0.githubusercontent.com/u/581008?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/nprasath002",
      "html_url": "https://github.com/nprasath002",
      "followers_url": "https://api.github.com/users/nprasath002/followers",
      "following_url": "https://api.github.com/users/nprasath002/following{/other_user}",
      "gists_url": "https://api.github.com/users/nprasath002/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/nprasath002/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/nprasath002/subscriptions",
      "organizations_url": "https://api.github.com/users/nprasath002/orgs",
      "repos_url": "https://api.github.com/users/nprasath002/repos",
      "events_url": "https://api.github.com/users/nprasath002/events{/privacy}",
      "received_events_url": "https://api.github.com/users/nprasath002/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 4,
    "created_at": "2018-11-30T01:40:58Z",
    "updated_at": "2018-11-30T05:50:43Z",
    "closed_at": null,
    "author_association": "NONE",
    "body": "How do I build react with source maps?\r\n\r\nI am in `master` branch with the latest code. I tried setting rollup config to `sourcemap: true` and setting `\"sourceMaps\": true` in .babalrc. I am getting the following error.\r\n\r\n`Sourcemap is likely to be incorrect: a plugin was used to transform files, but didn't generate a sourcemap for the transformation. Consult the plugin documentation for help`\r\n\r\nI want to generate source maps so that I can set breakpoints in the actual es6 package code and step through it.\r\n"
  }
]